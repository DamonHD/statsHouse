Proposed data structures for MIDI-like music.

Should be largely language agnostic.

A "style" input (enum?) which amongst other things indicates
a level of fidelity to the data at or processing for enjoyability.
Current values are:
  * 'none' for high fidelity for data science purposes, and no adornments
  * 'gentle' for some gentle adjustments and percussion etc
  * 'house' for house-style percussion and as much processing as required!

Class CSVRawRecord contains unmodifiableList of Strings:
  * One String for a comment record matching '^ *#'
  * One String per CSV field for data records.

Class DataPoint contains the data from a non-comment CSVRaw record.
These are generally managed in sorted order by date field.
Core fields include:
  * rawDate String as from CSVRaw YYYY[-MM[-DD]]
  * datumCount int number of Datum records in this row, non-negative.
  * the Datum records 
Derived values include:
  * cadence Y M D as enum
  * least significant date component as String and unsigned int eg "02" or 2 for "2023-02"

It would be good if CSVRawRecord and DataPoint and their users
can be able to work with variations in data formats in future.
  
Class Bar contains notes (or samples) for one bar typically for a single voice.

Class Phrase contains a sequence of Bar instances,
typically 1, 4 or 8.

Class Section contains a sequence of Phrase instances,
typically an even number, covers one segment of a Voice,
eg intro, verse, chorus.

Class Voice contains a sequence of Section instances,
typically for a single voice/channel,
plus metadata such as MIDI channel or tempo or volume.

Class Track contains a parallel set of Voice instances,
possibly not starting at the same moment, ie offset.

A Voice may also manage/reference external samples,
formulae, etc.


Transformations may clean, align, and fill in gaps
in a sequence of DataPoint items extracted from the data
in CSV form via a sequence of CSVRawRecord items.

Transformations may also include creating subsidiary voices
(eg percussion and bass) and derived data melody.

The result will then be transformed into a Track.

The Track can then be emitted as MIDICSV CSV format,
or MIDI or audio directly using language/library support,
eg in Java.