# awk function(s) to provide some general percussion.
# Include with -f or @include in gawk.


##########
# May be used / adapted / etc without any promise of fitness for purpose
# under the terms of the Apache License Version 2.0, January 2004
#     http://www.apache.org/licenses/LICENSE-2.0
##########


# Changelog (partial):
# 2023-04-24: no longer inserting Tempo or Time_signature records.


# LIBRARY FUNCTION: perc_general
#
# Provides some simple repeating (4/4) percussion,
# including 'none', 'gentle' and 'house',
# in a separate (specified) track on stdout in CSV format to MIDICSV.
# Typically call this from END.
#
# The track is always generated by the function,
# though it may be empty if "none" is specified as percType for example.
#
# This tries not to stomp on useful global variables.
#
# Arguments:
#
#   * seed  nnn
#     positive integer randomisation seed, can be -1 to disable randomness
#
#   * maxVol [0,127]
#     integer nominal maximum percusion volume 0 no percussion 127 is max
#
#   * trackNum  n
#     small integer track number for the percussion, eg 2
#
#   * percType  none|gentle|house
#     none: provide no percussion at all
#     gentle: a gentle something at the start of each 4/4 bar
#     house: a simple house pattern
#         (try with the GarageBand "Four on the Floor" voice)
#
#   * hints  percusion style/hints comma separated
#     TODO: pan=nn will pan the percussion to nn [0,127]
#
#   * stopAt  absolute clock ticks
#     do not start another bar at or after this absolute clock time
#
#   * tempo  microseconds per quarter note / beat
#     Eg 500000 for 120bpm (500uS per quarter note / beat).
#
#   * CLKSPQTR  clocks per quarter note / beat  eg 480
#
# WARNING: currently creates/overwrites some globals starting "PERC".

function perc_general(seed, maxVol, trackNum, percType, hints, stopAt, tempo, CLKSPQTR) {
    # Append separate percussion track.

# Percussion channel.
PERCCHAN=9
# Percussion 1, defaults to kick drum.
PERC1=36
PERC1GENTLE=39; # Single short clap per bar when gentle.
PERC1VOL=maxVol
PERC1VOLO=int(PERC1VOL * 0.8)
# Percussion 2, defaults to clap.
PERC2=39
PERC2VOL=100
# Percussion 3, defaults to (open) hi hat.
PERC3=46
PERC3VOL=64

print trackNum", 0, Start_track";
#print trackNum", 0, Tempo, "tempo;
#print trackNum", 0, Time_signature, 4, 2, 24, 8";
print trackNum", 0, Title_t, \"percussion: "PERC"\"";
#print "1, 0, Text_t, \"Params: intro="INTRO", perc="PERC"\"";

# Pan slightly off to one side.
#print trackNum", 0, Control_c, "PERCCHAN", 10, 72";

    if("house" == percType) {
        # Eg good GarageBand percussion voice/set for house.
print trackNum", 0, Instrument_name_t, \"Four on the Floor\"";
        }

    for(PERC_t = 0; PERC_t < stopAt; PERC_t += (4 * CLKSPQTR)) {
        if("none" == percType) {
            continue;

        } else if("gentle" == percType) {
        # Short clap on first beat.
print trackNum", "(PERC_t           )", Note_on_c, "PERCCHAN", "PERC1GENTLE", "(maxVol*.8);
print trackNum", "(PERC_t+0.25*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC1GENTLE", 0";

        } else if("house" == percType) {
print trackNum", "(PERC_t           )", Note_on_c, "PERCCHAN", "PERC1", "PERC1VOL;
print trackNum", "(PERC_t+0.5*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC3", "PERC3VOL;
print trackNum", "(PERC_t+1*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC3", 0";
print trackNum", "(PERC_t+1*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC1", 0";

print trackNum", "(PERC_t+1*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC1", "PERC1VOLO;
print trackNum", "(PERC_t+1*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC2", "PERC2VOL;
print trackNum", "(PERC_t+1.5*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC3", "PERC3VOL;
print trackNum", "(PERC_t+2*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC3", 0";
print trackNum", "(PERC_t+2*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC2", 0";
print trackNum", "(PERC_t+2*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC1", 0";

print trackNum", "(PERC_t+2*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC1", "PERC1VOLO;
print trackNum", "(PERC_t+2.5*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC3", "PERC3VOL;
print trackNum", "(PERC_t+3*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC3", 0";
print trackNum", "(PERC_t+3*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC1", 0";

print trackNum", "(PERC_t+3*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC1", "PERC1VOLO;
print trackNum", "(PERC_t+3*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC2", "PERC2VOL;
print trackNum", "(PERC_t+3.5*CLKSPQTR)", Note_on_c, "PERCCHAN", "PERC3", "PERC3VOL;
print trackNum", "(PERC_t+4*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC3", 0";
print trackNum", "(PERC_t+4*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC2", 0";
print trackNum", "(PERC_t+4*CLKSPQTR)", Note_off_c, "PERCCHAN", "PERC1", 0";
            }
        }

print trackNum", "PERC_t", End_track";
    }
