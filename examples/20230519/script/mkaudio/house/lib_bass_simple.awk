# awk function(s) to provide simple base line.
# Include with -f or @include in gawk.


##########
# May be used / adapted / etc without any promise of fitness for purpose
# under the terms of the Apache License Version 2.0, January 2004
#     http://www.apache.org/licenses/LICENSE-2.0
##########


# Changelog (partial):


# LIBRARY FUNCTION: bass_simple
#
# Goes along with some repeating (4/4) percussion,
# including 'none', 'gentle' and 'house',
# in a separate (specified) track on stdout in CSV format to MIDICSV.
# Typically call this from END.
#
# The track is always generated by the function,
# though it may be empty if "none" is specified as bassType for example.
#
# This tries not to stomp on useful global variables.
#
# Arguments:
#
#   * seed  nnn
#     positive integer randomisation seed, can be -1 to disable randomness
#
#   * maxVol [0,127]
#     integer nominal maximum percusion volume 0 no percussion 127 is max
#
#   * trackNum  n
#     small integer track number for the bass, eg 2
#
#   * channelNum  n
#     small integer channel/programme number for the bass, eg 2
#
#   * root  n
#     root (lowest data melody) note
#
#   * bassType  none|gentle|house
#     none: provide no bass at all
#     gentle: a gentle something at the start of each 4/4 bar
#     house: a simple house pattern
#
#   * hints  style/hints comma separated
#     TODO: pan=nn will pan the percussion to nn [0,127]
#
#   * stopAt  absolute clock ticks
#     do not start another bar at or after this absolute clock time
#
#   * tempo  microseconds per quarter note / beat
#     Eg 500000 for 120bpm (500uS per quarter note / beat).
#
#   * CLKSPQTR  clocks per quarter note / beat  eg 480
#

function bass_simple(seed, maxVol, trackNum, channelNum, root, bassType, hints, stopAt, tempo, CLKSPQTR,
        # LOCALS
        clock, clockOB) {
    # Append separate bass track.

print trackNum", 0, Start_track";
print trackNum", 0, Title_t, \"bass: "bassType"\"";

# Choose the instrument.
# Acoustic bass (33).
#print trackNum", 0, Program_c, "channelNum", " ((("gentle"==bassType)?33-1:39-1));
print trackNum", 0, Program_c, "channelNum", 33"; # Acoustic bass.

# Set the volume.
# Relatively quiet for "gentle".
print trackNum ", 0, Control_c, "channelNum", 7, " (("gentle"==bassType)?maxVol*.4:maxVol*.6);

# Pan slightly off to one side.
#print trackNum", 0, Control_c, "channelNum", 10, 72";

    if("house" == percType) {
        }

    for(clock = 0; clock < stopAt; clock += (4 * CLKSPQTR)) {
        if("none" == bassType) {
            continue;

        } else if("gentle" == bassType) {
        # On first beat, quietly.  One octave down from root.
print trackNum", "(clock           )", Note_on_c, "channelNum", "(root-12)", 64";
print trackNum", "(clock+0.25*CLKSPQTR)", Note_off_c, "channelNum", "(root-12)", 0";

        } else if("house" == bassType) {
            # Possible off-beat.
            #clockOB = clock + 0.5*CLKSPQTR;
            clockOB = clock;
print trackNum", "(clockOB              )", Note_on_c, "channelNum", "(root-12)", 64";
print trackNum", "(clockOB+0.25*CLKSPQTR)", Note_off_c, "channelNum", "(root-12)", 0";
print trackNum", "(clockOB+1   *CLKSPQTR)", Note_on_c, "channelNum", "(root-12)", 64";
print trackNum", "(clockOB+1.25*CLKSPQTR)", Note_off_c, "channelNum", "(root-12)", 0";
print trackNum", "(clockOB+2   *CLKSPQTR)", Note_on_c, "channelNum", "(root-12)", 64";
print trackNum", "(clockOB+2.25*CLKSPQTR)", Note_off_c, "channelNum", "(root-12)", 0";
print trackNum", "(clockOB+3   *CLKSPQTR)", Note_on_c, "channelNum", "(root-12)", 64";
print trackNum", "(clockOB+3.25*CLKSPQTR)", Note_off_c, "channelNum", "(root-12)", 0";
            }
        }

print trackNum", "clock", End_track";
    }
